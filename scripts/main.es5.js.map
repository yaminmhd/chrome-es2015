{"version":3,"sources":["main.es6.js"],"names":[],"mappings":"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","file":"main.es5.js","sourcesContent":["class StickyNotesApp {\n  //init sticky notes app\n  constructor(){\n    this.notesContainer = document.getElementById('notes-container');\n    this.noteMessageInput = document.getElementById('message');\n    this.addNoteButton = document.getElementById('save');\n    this.notesSectionTitle = document.getElementById('notes-section-title');\n\n    // Saves notes on button click.\n    this.addNoteButton.addEventListener('click', () => this.saveNote());\n\n    // Toggle for the button.\n    this.noteMessageInput.addEventListener('keyup', ()=> this.toggleButton());\n\n    // Loads all the notes.\n    for (let key in localStorage) {\n    this.displayNote(key, localStorage[key]);\n    }\n    //listen for updates to notes from other windows\n    window.addEventListener('storage', e=> this.displayNote(e.key, e.newValue))\n  }\n\n  //saves a new sticky note on localstorage\n  saveNote(element){\n    if (this.noteMessageInput.value) {\n      let key = Date.now().toString();\n      localStorage.setItem(key, this.noteMessageInput.value);\n      this.displayNote(key, this.noteMessageInput.value);\n      this.resetMaterialTextField(this.noteMessageInput);\n      this.toggleButton();\n    }\n  }\n\n  //resets the given MaterialTextField\n  resetMaterialTextField(element) {\n    element.value = '';\n    element.parentNode.MaterialTextfield.boundUpdateClassesHandler();\n    element.blur();\n  }\n\n  //creates/updates/deletes a note in the UI\n  displayNote(key,message){\n    let note = document.getElementById(key);\n    // If no element with the given key exists we create a new note.\n    if (!note) {\n      note = document.createElement('sticky-note');\n      note.id = key;\n      this.notesContainer.insertBefore(note, this.notesSectionTitle.nextSibling);\n    }\n  // If the message is null we delete the note.\n    if (!message) {\n      return note.deleteNote();\n    }\n    note.setMessage(message);\n  }\n\n  //enables or disables the submit button depending on the values of the input\n  toggleButton(){\n    if (this.noteMessageInput.value) {\n      this.addNoteButton.removeAttribute('disabled');\n    } else {\n      this.addNoteButton.setAttribute('disabled', 'true');\n    }\n  }\n}\n\n //on load start the app\n window.addEventListener('load', () => new StickyNotesApp());\n\nclass StickyNote extends HTMLElement{\n  //fires when an instance of the element is created\n  createdCallback(){\n    this.classList.add(...StickyNote.CLASSES);\n    this.innerHTML = StickyNote.TEMPLATE;\n    this.messageElement = this.querySelector('.message');\n    this.dateElement = this.querySelector('.date');\n    this.deleteButton = this.querySelector('.delete');\n    this.deleteButton.addEventListener('click', () => this.deleteNote());\n  };\n\n  //fires when an attribute of the element is added/deleted/modified\n  attributeChangedCallback(attributeName){\n    // We display/update the created date message if the id changes.\n    if (attributeName == 'id') {\n      let date;\n      // if (this.id) {\n\n      // } else {\n      //   date = new Date();\n      // }\n      let dateFormatterOptions = {day: 'numeric', month: 'short'};\n      let shortDate = new Intl.DateTimeFormat(\"en-US\", dateFormatterOptions).format(date);\n      this.dateElement.textContent = `Created on ${shortDate}`\n    }\n  }\n\n  //sets the message of the note\n  setMessage(message){\n    this.messageElement.textContent = message;\n    // Replace all line breaks by <br>.\n    this.messageElement.innerHTML = this.messageElement.innerHTML.replace(/\\n/g, '<br>');\n  }\n\n  //deletes the note by removing the element from the DOM and the data from\n  //the local storage\n  deleteNote(){\n    localStorage.removeItem(this.id);\n    this.parentNode.removeChild(this);\n  }\n}\n\n //initial content of the element\n StickyNote.TEMPLATE =`\n  <div class=\"message\"></div>\n  <div class=\"date\"></div>\n  <button class=\"delete mdl-button mdl-js-button mdl-js-ripple-effect\">\n   'Delete'\n  </button>`;\n\n //StickyNote elements top level style classes\n StickyNote.CLASSES =['mdl-cell--4-col-desktop', 'mdl-card__supporting-text', 'mdl-cell--12-col',\n  'mdl-shadow--2dp', 'mdl-cell--4-col-tablet', 'mdl-card', 'mdl-cell', 'sticky-note'];\n\n //list of shortened month names\n StickyNote.MONTHS =['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\n\n document.registerElement('sticky-note', StickyNote);\n\n"]}